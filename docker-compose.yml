services:

  postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:${POSTGRES_VERSION}
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h ${POSTGRES_HOST}" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - services

  migrations:
    build:
      dockerfile: ./migrations/Dockerfile
    container_name: migrations
    env_file:
      - .env
    environment:
      - MIGRATIONS=True
      - LOCAL=False
      - DEBUG=False
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - services

  redis:
    container_name: ${REDIS_HOST}
    image: redis:${REDIS_VERSION}
    restart: always
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - redis_data:/var/lib/redis/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 3
      start_period: 1s
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - services

volumes:
  redis_data:
  postgres_data:

networks:
  services:
