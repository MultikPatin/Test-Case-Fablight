services:

  postgres:
    build:
      dockerfile: postgres_extensions/Dockerfile
    container_name: ${AUTH_POSTGRES_HOST}
    restart: always
    environment:
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_HOST=${AUTH_POSTGRES_HOST}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h ${AUTH_POSTGRES_HOST}" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    ports:
      - "${AUTH_POSTGRES_PORT_LOCAL}:${AUTH_POSTGRES_PORT}"
    networks:
      - services

  migrations:
    build:
      dockerfile: ./migrations/Dockerfile
    container_name: migrations_auth
    environment:
      - LOCAL=False
      - DEBUG=False
      - AUTH_POSTGRES_DB=${AUTH_POSTGRES_DB}
      - AUTH_POSTGRES_USER=${AUTH_POSTGRES_USER}
      - AUTH_POSTGRES_USER=${AUTH_POSTGRES_USER}
      - AUTH_POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - AUTH_POSTGRES_HOST=${AUTH_POSTGRES_HOST}
      - AUTH_POSTGRES_PORT=${AUTH_POSTGRES_PORT}
      - AUTH_POSTGRES_HOST_LOCAL=${AUTH_POSTGRES_HOST_LOCAL}
      - AUTH_POSTGRES_PORT_LOCAL=${AUTH_POSTGRES_PORT_LOCAL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - services

  redis:
    container_name: ${AUTH_REDIS_HOST}
    image: redis:${REDIS_VERSION}
    restart: always
    environment:
      - REDIS_HOST=${AUTH_REDIS_HOST}
      - REDIS_PORT=${AUTH_REDIS_PORT}
    volumes:
      - redis_data:/var/lib/redis/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 3
      start_period: 1s
    ports:
      - "${AUTH_REDIS_PORT_LOCAL}:${AUTH_REDIS_PORT}"
    networks:
      - services

volumes:
  redis_data:
  postgres_data:

networks:
  services:
